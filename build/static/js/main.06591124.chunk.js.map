{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","process","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","result","console","error","Feature","featuredResult","id","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","department","people","division","contact","creditline","length","map","image","src","baseimageurl","alt","key","Loading","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","results","disabled","prev","next","record","index","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","classifications","catch","onSubmit","querySearchResults","htmlFor","type","placeholder","onChange","target","name","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"oMAKaA,EAAW,oCAClBC,EAAMC,8CAKL,SAAeC,EAAtB,oC,4CAAO,WAAiDC,EAAMC,GAAvD,iBAAAC,EAAA,+EAEoBC,MAAM,GAAD,OACvBP,EADuB,mBACJC,EADI,YACGG,EADH,YACWI,UACnCH,EAAMI,MAAM,KAAKC,KAAK,QAJvB,cAEGC,EAFH,gBAOgBA,EAASC,OAPzB,cAOGC,EAPH,yBASIA,GATJ,wG,sBAkBA,SAAeC,EAAtB,kC,4CAAO,WAAwCC,GAAxC,iBAAAT,EAAA,+EAEoBC,MAAMQ,GAF1B,cAEGJ,EAFH,gBAGgBA,EAASC,OAHzB,cAGGC,EAHH,yBAKIA,GALJ,wG,sBAgBA,SAAeG,EAAtB,kC,4CAAO,uCAAAV,EAAA,6DACLW,EADK,EACLA,QACAC,EAFK,EAELA,eACAC,EAHK,EAGLA,YAEMJ,EALD,UAKUf,EALV,mBAK6BC,EAL7B,2BAKmDiB,EALnD,oBAK6ED,EAL7E,oBAKgGE,GALhG,kBAQoBZ,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,yBAWIA,GAXJ,wG,sBAoBA,SAAeO,IAAtB,+B,4CAAO,kCAAAd,EAAA,0DACDe,aAAaC,QAAQ,aADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,eAFpC,cAKCP,EALD,UAKUf,EALV,oBAK8BC,EAL9B,kDAQoBM,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGY,EAAUZ,EAAKY,QAErBJ,aAAaK,QAAQ,YAAaH,KAAKI,UAAUF,IAZ9C,kBAcIA,GAdJ,wG,sBAuBA,SAAeG,IAAtB,+B,4CAAO,kCAAAtB,EAAA,0DACDe,aAAaC,QAAQ,mBADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,qBAFpC,cAKCP,EALD,UAKUf,EALV,2BAKqCC,EALrC,yCAQoBM,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGY,EAAUZ,EAAKY,QAErBJ,aAAaK,QAAQ,kBAAmBH,KAAKI,UAAUF,IAZpD,kBAcIA,GAdJ,wG,sBCzDP,IAAMI,EAAa,SAACC,GAAW,IACrBC,EAA4DD,EAA5DC,WAAYC,EAAgDF,EAAhDE,YAAaC,EAAmCH,EAAnCG,aAAcC,EAAqBJ,EAArBI,iBAE/C,OACE,0BAAMC,UAAU,WACd,uBACEC,KAAK,IACLC,QAAO,uCAAE,WAAOC,GAAP,eAAAhC,EAAA,6DACPgC,EAAMC,iBACNN,GAAa,GAFN,kBAKgB9B,EAAkC,CACrD4B,aACAC,gBAPG,OAKCQ,EALD,OAULN,EAAiBM,GAVZ,gDAYLC,QAAQC,MAAR,MAZK,yBAcLT,GAAa,GAdR,4EAAF,uDAkBNF,KAmLMY,EA3IC,SAACb,GAAW,IAClBc,EAAmBd,EAAnBc,eAER,IAAKA,EACH,OAAO,0BAAMC,GAAG,YAJO,IAQvBC,EAeEF,EAfFE,MACAC,EAcEH,EAdFG,MACAC,EAaEJ,EAbFI,OACAC,EAYEL,EAZFK,gBACAC,EAWEN,EAXFM,YACAC,EAUEP,EAVFO,QACAC,EASER,EATFQ,MACAC,EAQET,EARFS,UACAC,EAOEV,EAPFU,OACAC,EAMEX,EANFW,WAEAC,GAIEZ,EALFa,OAKEb,EAJFY,YACAE,EAGEd,EAHFc,SACAC,EAEEf,EAFFe,QACAC,EACEhB,EADFgB,WAGF,OACE,0BAAMf,GAAG,WACP,yBAAKV,UAAU,kBACb,gCACE,4BAAKW,GACL,4BAAKC,IAEP,6BAASZ,UAAU,SAChBe,EACC,kBAAC,WAAD,KACE,0BAAMf,UAAU,SAAhB,eACA,0BAAMA,UAAU,WAAWe,IAE3B,KACHC,EACC,kBAAC,WAAD,KACE,0BAAMhB,UAAU,SAAhB,WACA,kBAAC,EAAD,eACEJ,WAAW,UACXC,YAAamB,GACTrB,KAGN,KACHsB,EACC,kBAAC,WAAD,KACE,0BAAMjB,UAAU,SAAhB,SACA,0BAAMA,UAAU,WAAWiB,IAE3B,KACHC,EACC,kBAAC,WAAD,KACE,0BAAMlB,UAAU,SAAhB,aACA,kBAAC,EAAD,eACEJ,WAAW,YACXC,YAAaqB,GACTvB,KAGN,KACHwB,EACC,kBAAC,WAAD,KACE,0BAAMnB,UAAU,SAAhB,UACA,kBAAC,EAAD,eAAYJ,WAAW,SAASC,YAAasB,GAAYxB,KAEzD,KAEHyB,EACC,kBAAC,WAAD,KACE,0BAAMpB,UAAU,SAAhB,cACA,0BAAMA,UAAU,WAAWoB,IAE3B,KAcHC,EACC,kBAAC,WAAD,KACE,0BAAMrB,UAAU,SAAhB,aACA,0BAAMA,UAAU,WAAWqB,IAE3B,KAEHE,EACC,kBAAC,WAAD,KACE,0BAAMvB,UAAU,SAAhB,YACA,0BAAMA,UAAU,WAAWuB,IAE3B,KAEHC,EACC,kBAAC,WAAD,KACE,0BAAMxB,UAAU,SAAhB,WACA,0BAAMA,UAAU,WAAWwB,IAE3B,KAEHC,EACC,kBAAC,WAAD,KACE,0BAAMzB,UAAU,SAAhB,eACA,0BAAMA,UAAU,WAAWyB,IAE3B,MAEN,6BAASzB,UAAU,UAChBa,GAAUA,EAAOa,OAAS,EACzBb,EAAOc,KAAI,SAACC,GACV,OACE,yBACEC,IAAKD,EAAME,aACXC,IAAKH,EAAME,aACXE,IAAKJ,EAAME,kBAIfhB,EACF,yBAAKe,IAAKf,EAAiBiB,IAAKjB,IAC9B,SC1NCmB,EARC,WACd,OACE,yBAAKvB,GAAG,WACN,wBAAIV,UAAU,WAAd,kBC4DSkC,EA7DC,SAACvC,GAAW,IAClBI,EAAsDJ,EAAtDI,iBAAkBoC,EAAoCxC,EAApCwC,kBAAmBrC,EAAiBH,EAAjBG,aADpB,EAECH,EAAMyC,cAAxBC,EAFiB,EAEjBA,KAAM/C,EAFW,EAEXA,QAFW,SAGVgD,EAHU,8EAGzB,WAAyBC,GAAzB,eAAApE,EAAA,6DACE2B,GAAa,GADf,kBAI0BnB,EAAyB4D,GAJnD,OAIUC,EAJV,OAKIzC,EAAiByC,GALrB,gDAOIlC,QAAQC,MAAR,MAPJ,yBASIT,GAAa,GATjB,6EAHyB,sBAgBzB,OACE,2BAAOY,GAAG,WACR,4BAAQV,UAAU,cAChB,4BACEyC,UAAWJ,EAAKK,KAChB1C,UAAU,WACVE,QAAS,WACPoC,EAAUD,EAAKK,QAJnB,YASA,4BACED,UAAWJ,EAAKM,KAChB3C,UAAU,OACVE,QAAS,WACPoC,EAAUD,EAAKM,QAJnB,SAUF,6BAAS3C,UAAU,WAChBV,EAAQqC,KAAI,SAACiB,EAAQC,GAAT,OACX,yBACEb,IAAKa,EACL7C,UAAU,iBACVE,QAAS,SAACC,GACRA,EAAMC,iBACN+B,EAAkBS,KAGnBA,EAAO9B,gBACN,yBAAKe,IAAKe,EAAO9B,gBAAiBiB,IAAKa,EAAO7B,cAE9C,GAED6B,EAAOjC,MAAQ,4BAAKiC,EAAOjC,OAAc,mDC+CvCmC,EAhGA,SAAC,GAAwC,IAAtC/C,EAAqC,EAArCA,iBAAkBD,EAAmB,EAAnBA,aAAmB,EACfiD,mBAAS,IADM,mBAC9CC,EAD8C,KACjCC,EADiC,OAEDF,mBAAS,IAFR,mBAE9CG,EAF8C,KAE1BC,EAF0B,OAGfJ,mBAAS,IAHM,mBAG9C/D,EAH8C,KAGjCoE,EAHiC,OAIvBL,mBAAS,OAJc,mBAI9CjE,EAJ8C,KAIrCuE,EAJqC,OAKTN,mBAAS,OALA,mBAK9ChE,EAL8C,KAK9BuE,EAL8B,KAgBrD,OATAC,qBAAU,WACRC,QAAQC,IAAI,CAACxE,IAAqBQ,MAC/BiE,MAAK,YAAmC,IAAD,mBAAhCC,EAAgC,KAArBC,EAAqB,KACtCX,EAAeU,GACfR,EAAsBS,MAEvBC,MAAMvD,QAAQC,SAChB,IAGD,0BACEG,GAAG,SACHoD,SAAQ,uCAAE,WAAO3D,GAAP,eAAAhC,EAAA,6DAERgC,EAAMC,iBACNN,GAAa,GAHL,kBAK2BjB,EAAkB,CACjDC,UACAC,iBACAC,gBARI,OAKA+E,EALA,OAUNhE,EAAiBgE,GAVX,gDAYNzD,QAAQC,MAAR,MAZM,yBAcNT,GAAa,GAdP,4EAAF,uDAkBR,kCACE,2BAAOkE,QAAQ,YAAf,SACA,2BACEtD,GAAG,WACHuD,KAAK,OACLC,YAAY,oBACZhG,MAAOc,EACPmF,SAAU,SAAChE,GAAD,OAAWiD,EAAejD,EAAMiE,OAAOlG,WAGrD,kCACE,2BAAO8F,QAAQ,yBAAf,iBACiB,IACf,0BAAMhE,UAAU,wBAAhB,IACIkD,EAAmBxB,OADvB,MAIF,4BACE2C,KAAK,iBACL3D,GAAG,wBACHxC,MAAOa,EACPoF,SAAU,SAAChE,GAAD,OAAWmD,EAAkBnD,EAAMiE,OAAOlG,SAEpD,4BAAQA,MAAM,OAAd,OACCgF,EAAmBvB,KAAI,SAAC5C,EAAgB8D,GAAjB,OACtB,4BACEb,IAAG,UAAKa,EAAL,YAAc9D,EAAesF,MAChCnG,MAAOa,EAAesF,MAErB,IACAtF,EAAesF,KAAM,UAK9B,kCACE,2BAAOL,QAAQ,kBAAf,WACU,0BAAMhE,UAAU,iBAAhB,IAAkCgD,EAAYtB,OAA9C,MAEV,4BACE2C,KAAK,UACL3D,GAAG,iBACHxC,MAAOY,EACPqF,SAAU,SAAChE,GAAD,OAAWkD,EAAWlD,EAAMiE,OAAOlG,SAE7C,4BAAQA,MAAM,OAAd,OACC8E,EAAYrB,KAAI,SAAC7C,EAAS+D,GAAV,OACf,4BAAQb,IAAG,UAAKa,EAAL,YAAc/D,EAAQuF,MAAQnG,MAAOY,EAAQuF,MACrD,IACAvF,EAAQuF,KAAM,UAKvB,4CCxFSC,EATD,WACZ,OACE,yBAAK5D,GAAG,SACN,iDACA,qFCDA6D,EAAM,WAAO,IAAD,EAC0BxB,mBAAS,CAAEV,KAAM,GAAI/C,QAAS,KADxD,mBACT8C,EADS,KACMrC,EADN,OAE4BgD,mBAAS,MAFrC,mBAETtC,EAFS,KAEO0B,EAFP,OAGkBY,oBAAS,GAH3B,mBAGTyB,EAHS,KAGE1E,EAHF,KAKhB,OACE,yBAAKE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQD,iBAAkBA,EAAkBD,aAAcA,IAC1D,kBAAC,EAAD,CACEsC,cAAeA,EACfrC,iBAAkBA,EAClBD,aAAcA,EACdqC,kBAAmBA,IAGrB,kBAAC,EAAD,CACE1B,eAAgBA,EAChBX,aAAcA,EACdC,iBAAkBA,IAEnByE,EAAY,kBAAC,EAAD,MAAc,OAKjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,S","file":"static/js/main.06591124.chunk.js","sourcesContent":["/**\r\n * This file features and exports all of your calls to the API\r\n *\r\n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\r\n */\r\nexport const BASE_URL = \"https://api.harvardartmuseums.org\";\r\nconst KEY = process.env.REACT_APP_KEY;\r\n\r\n/**\r\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\r\n */\r\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\r\n  try {\r\n    const response = await fetch(\r\n      `${BASE_URL}/object?${KEY}&${term}=${encodeURI(\r\n        value.split(\"-\").join(\"|\")\r\n      )}`\r\n    );\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\r\n */\r\nexport async function fetchQueryResultsFromURL(url) {\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\r\n *\r\n * Then makes a call to the API, and returns the first page of results\r\n */\r\nexport async function fetchQueryResults({\r\n  century,\r\n  classification,\r\n  queryString,\r\n}) {\r\n  const url = `${BASE_URL}/object?${KEY}&classification=${classification}&century=${century}&keyword=${queryString}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\r\n */\r\nexport async function fetchAllCenturies() {\r\n  if (localStorage.getItem(\"centuries\")) {\r\n    return JSON.parse(localStorage.getItem(\"centuries\"));\r\n  }\r\n\r\n  const url = `${BASE_URL}/century?${KEY}&size=100&sort=temporalorder`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const records = data.records;\r\n\r\n    localStorage.setItem(\"centuries\", JSON.stringify(records));\r\n\r\n    return records;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not\r\n */\r\nexport async function fetchAllClassifications() {\r\n  if (localStorage.getItem(\"classifications\")) {\r\n    return JSON.parse(localStorage.getItem(\"classifications\"));\r\n  }\r\n\r\n  const url = `${BASE_URL}/classification?${KEY}&size=100&sort=name`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const records = data.records;\r\n\r\n    localStorage.setItem(\"classifications\", JSON.stringify(records));\r\n\r\n    return records;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n","import React, { Fragment } from \"react\";\r\n\r\n// Don't touch this import\r\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\r\n\r\n/**\r\n * We need a new component called Searchable which:\r\n *\r\n * Has a template like this:\r\n *\r\n * <span className=\"content\">\r\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\r\n * </span>\r\n *\r\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\r\n *\r\n * When someone clicks the anchor tag, you should:\r\n *\r\n * - preventDefault on the event\r\n * - call setIsLoading, set it to true\r\n *\r\n * Then start a try/catch/finally block:\r\n *\r\n * try:\r\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\r\n *  - send the result to setSearchResults (which will update the Preview component)\r\n * catch:\r\n *  - console.error the error\r\n * finally:\r\n *  - call setIsLoading, set it to false\r\n */\r\nconst Searchable = (props) => {\r\n  const { searchTerm, searchValue, setIsLoading, setSearchResults } = props;\r\n\r\n  return (\r\n    <span className=\"content\">\r\n      <a\r\n        href=\"#\"\r\n        onClick={async (event) => {\r\n          event.preventDefault();\r\n          setIsLoading(true);\r\n\r\n          try {\r\n            const result = await fetchQueryResultsFromTermAndValue({\r\n              searchTerm,\r\n              searchValue,\r\n            });\r\n\r\n            setSearchResults(result);\r\n          } catch (error) {\r\n            console.error(error);\r\n          } finally {\r\n            setIsLoading(false);\r\n          }\r\n        }}\r\n      >\r\n        {searchTerm}\r\n      </a>\r\n    </span>\r\n  );\r\n};\r\n\r\n/**\r\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\r\n *\r\n * <main id=\"feature\"></main>\r\n *\r\n * And like this when one is:\r\n *\r\n * <main id=\"feature\">\r\n *   <div className=\"object-feature\">\r\n *     <header>\r\n *       <h3>OBJECT TITLE</h3>\r\n *       <h4>WHEN IT IS DATED</h4>\r\n *     </header>\r\n *     <section className=\"facts\">\r\n *       <span className=\"title\">FACT NAME</span>\r\n *       <span className=\"content\">FACT VALUE</span>\r\n *       <span className=\"title\">NEXT FACT NAME</span>\r\n *       <span className=\"content\">NEXT FACT VALUE</span>\r\n *     </section>\r\n *     <section className=\"photos\">\r\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\r\n *     </section>\r\n *   </div>\r\n * </main>\r\n *\r\n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style,\r\n * technique, medium, dimensions, people, department, division, contact, creditline\r\n *\r\n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\r\n *\r\n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\r\n *\r\n * This component should be exported as default.\r\n */\r\nconst Feature = (props) => {\r\n  const { featuredResult } = props;\r\n\r\n  if (!featuredResult) {\r\n    return <main id=\"feature\"></main>;\r\n  }\r\n\r\n  const {\r\n    title,\r\n    dated,\r\n    images,\r\n    primaryimageurl,\r\n    description,\r\n    culture,\r\n    style,\r\n    technique,\r\n    medium,\r\n    dimensions,\r\n    people,\r\n    department,\r\n    division,\r\n    contact,\r\n    creditline,\r\n  } = featuredResult;\r\n\r\n  return (\r\n    <main id=\"feature\">\r\n      <div className=\"object-feature\">\r\n        <header>\r\n          <h3>{title}</h3>\r\n          <h4>{dated}</h4>\r\n        </header>\r\n        <section className=\"facts\">\r\n          {description ? (\r\n            <Fragment>\r\n              <span className=\"title\">Description</span>\r\n              <span className=\"content\">{description}</span>\r\n            </Fragment>\r\n          ) : null}\r\n          {culture ? (\r\n            <Fragment>\r\n              <span className=\"title\">Culture</span>\r\n              <Searchable\r\n                searchTerm=\"culture\"\r\n                searchValue={culture}\r\n                {...props}\r\n              />\r\n            </Fragment>\r\n          ) : null}\r\n          {style ? (\r\n            <Fragment>\r\n              <span className=\"title\">Style</span>\r\n              <span className=\"content\">{style}</span>\r\n            </Fragment>\r\n          ) : null}\r\n          {technique ? (\r\n            <Fragment>\r\n              <span className=\"title\">Technique</span>\r\n              <Searchable\r\n                searchTerm=\"technique\"\r\n                searchValue={technique}\r\n                {...props}\r\n              />\r\n            </Fragment>\r\n          ) : null}\r\n          {medium ? (\r\n            <Fragment>\r\n              <span className=\"title\">Medium</span>\r\n              <Searchable searchTerm=\"medium\" searchValue={medium} {...props} />\r\n            </Fragment>\r\n          ) : null}\r\n\r\n          {dimensions ? (\r\n            <Fragment>\r\n              <span className=\"title\">Dimensions</span>\r\n              <span className=\"content\">{dimensions}</span>\r\n            </Fragment>\r\n          ) : null}\r\n          {/* {people && people.length > 0\r\n            ? people.map((person) => {\r\n                <Fragment>\r\n                  <span className=\"title\">{person.displayname}</span>\r\n                  <Searchable\r\n                    searchTerm=\"person.displayname\"\r\n                    searchValue={person.displayname}\r\n                    {...props}\r\n                  />\r\n                </Fragment>;\r\n              })\r\n            : null} */}\r\n\r\n          {department ? (\r\n            <Fragment>\r\n              <span className=\"title\">epartment</span>\r\n              <span className=\"content\">{department}</span>\r\n            </Fragment>\r\n          ) : null}\r\n\r\n          {division ? (\r\n            <Fragment>\r\n              <span className=\"title\">Division</span>\r\n              <span className=\"content\">{division}</span>\r\n            </Fragment>\r\n          ) : null}\r\n\r\n          {contact ? (\r\n            <Fragment>\r\n              <span className=\"title\">Contact</span>\r\n              <span className=\"content\">{contact}</span>\r\n            </Fragment>\r\n          ) : null}\r\n\r\n          {creditline ? (\r\n            <Fragment>\r\n              <span className=\"title\">Credit Line</span>\r\n              <span className=\"content\">{creditline}</span>\r\n            </Fragment>\r\n          ) : null}\r\n        </section>\r\n        <section className=\"photos\">\r\n          {images && images.length > 0 ? (\r\n            images.map((image) => {\r\n              return (\r\n                <img\r\n                  src={image.baseimageurl}\r\n                  alt={image.baseimageurl}\r\n                  key={image.baseimageurl}\r\n                />\r\n              );\r\n            })\r\n          ) : primaryimageurl ? (\r\n            <img src={primaryimageurl} alt={primaryimageurl} />\r\n          ) : null}\r\n        </section>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Feature;\r\n","import React from \"react\";\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div id=\"loading\">\r\n      <h2 className=\"message\">Searching...</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\n\r\nimport { fetchQueryResultsFromURL } from \"../api\";\r\n\r\nconst Preview = (props) => {\r\n  const { setSearchResults, setFeaturedResult, setIsLoading } = props;\r\n  const { info, records } = props.searchResults;\r\n  async function fetchPage(pageUrl) {\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const results = await fetchQueryResultsFromURL(pageUrl);\r\n      setSearchResults(results);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <aside id=\"preview\">\r\n      <header className=\"pagination\">\r\n        <button\r\n          disabled={!info.prev}\r\n          className=\"previous\"\r\n          onClick={() => {\r\n            fetchPage(info.prev);\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          disabled={!info.next}\r\n          className=\"next\"\r\n          onClick={() => {\r\n            fetchPage(info.next);\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </header>\r\n      <section className=\"results\">\r\n        {records.map((record, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"object-preview\"\r\n            onClick={(event) => {\r\n              event.preventDefault();\r\n              setFeaturedResult(record);\r\n            }}\r\n          >\r\n            {record.primaryimageurl ? (\r\n              <img src={record.primaryimageurl} alt={record.description} />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {record.title ? <h3>{record.title}</h3> : <h3>MISSING INFO</h3>}\r\n          </div>\r\n        ))}\r\n      </section>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  fetchAllCenturies,\r\n  fetchAllClassifications,\r\n  fetchQueryResults,\r\n} from \"../api\";\r\n\r\nconst Search = ({ setSearchResults, setIsLoading }) => {\r\n  const [centuryList, setCenturyList] = useState([]);\r\n  const [classificationList, setClassificationList] = useState([]);\r\n  const [queryString, setQueryString] = useState(\"\");\r\n  const [century, setCentury] = useState(\"any\");\r\n  const [classification, setClassification] = useState(\"any\");\r\n\r\n  useEffect(() => {\r\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\r\n      .then(([centuries, classifications]) => {\r\n        setCenturyList(centuries);\r\n        setClassificationList(classifications);\r\n      })\r\n      .catch(console.error);\r\n  }, []);\r\n\r\n  return (\r\n    <form\r\n      id=\"search\"\r\n      onSubmit={async (event) => {\r\n        // write code here\r\n        event.preventDefault();\r\n        setIsLoading(true);\r\n        try {\r\n          const querySearchResults = await fetchQueryResults({\r\n            century,\r\n            classification,\r\n            queryString,\r\n          });\r\n          setSearchResults(querySearchResults);\r\n        } catch (error) {\r\n          console.error(error);\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n      }}\r\n    >\r\n      <fieldset>\r\n        <label htmlFor=\"keywords\">Query</label>\r\n        <input\r\n          id=\"keywords\"\r\n          type=\"text\"\r\n          placeholder=\"enter keywords...\"\r\n          value={queryString}\r\n          onChange={(event) => setQueryString(event.target.value)}\r\n        />\r\n      </fieldset>\r\n      <fieldset>\r\n        <label htmlFor=\"select-classification\">\r\n          Classification{\" \"}\r\n          <span className=\"classification-count\">\r\n            ({classificationList.length})\r\n          </span>\r\n        </label>\r\n        <select\r\n          name=\"classification\"\r\n          id=\"select-classification\"\r\n          value={classification}\r\n          onChange={(event) => setClassification(event.target.value)}\r\n        >\r\n          <option value=\"any\">Any</option>\r\n          {classificationList.map((classification, index) => (\r\n            <option\r\n              key={`${index}:${classification.name}`}\r\n              value={classification.name}\r\n            >\r\n              {\" \"}\r\n              {classification.name}{\" \"}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </fieldset>\r\n      <fieldset>\r\n        <label htmlFor=\"select-century\">\r\n          Century <span className=\"century-count\">({centuryList.length})</span>\r\n        </label>\r\n        <select\r\n          name=\"century\"\r\n          id=\"select-century\"\r\n          value={century}\r\n          onChange={(event) => setCentury(event.target.value)}\r\n        >\r\n          <option value=\"any\">Any</option>\r\n          {centuryList.map((century, index) => (\r\n            <option key={`${index}:${century.name}`} value={century.name}>\r\n              {\" \"}\r\n              {century.name}{\" \"}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </fieldset>\r\n      <button>SEARCH</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div id=\"title\">\r\n      <h1>The Art Collector</h1>\r\n      <h5>Search the Harvard Art Museums' Private Collections</h5>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { Feature, Loading, Preview, Search, Title } from \"./components\";\r\n\r\nconst App = () => {\r\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] });\r\n  const [featuredResult, setFeaturedResult] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Title />\r\n      <Search setSearchResults={setSearchResults} setIsLoading={setIsLoading} />\r\n      <Preview\r\n        searchResults={searchResults}\r\n        setSearchResults={setSearchResults}\r\n        setIsLoading={setIsLoading}\r\n        setFeaturedResult={setFeaturedResult}\r\n      />\r\n      {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\r\n      <Feature\r\n        featuredResult={featuredResult}\r\n        setIsLoading={setIsLoading}\r\n        setSearchResults={setSearchResults}\r\n      />\r\n      {isLoading ? <Loading /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById(\"app\"));\r\n"],"sourceRoot":""}